


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 AREA             PROGRAM, CODE, READONLY
    3 00000000         
    4 00000000                 EXPORT           wrapper
    5 00000000                 EXPORT           bcdadd
    6 00000000                 ENTRY
    7 00000000         
    8 00000000         ;wrapper to the bcdadd routine that sends it operands an
                       d tests the returned sum
    9 00000000         wrapper
   10 00000000         ;test cases
   11 00000000         ;CASE 1: ro+, r1+
   12 00000000 495A            LDR              r1, =0x00762500
   13 00000002 485B            LDR              r0, =0x00309380
   14 00000004         
   15 00000004 F7FF FFFE       BL               bcdadd
   16 00000008         
   17 00000008 4A5A            LDR              r2, =0x01071880
   18 0000000A 4290            CMP              r0, r2
   19 0000000C D13B            BNE              error
   20 0000000E         
   21 0000000E         ;CASE 2: r0-,r1-
   22 0000000E 495A            LDR              r1, =0x80039785
   23 00000010 485A            LDR              r0, =0x80139962
   24 00000012         
   25 00000012 F7FF FFFE       BL               bcdadd
   26 00000016         
   27 00000016 4A5A            LDR              r2, =0x80179747
   28 00000018 4290            CMP              r0, r2
   29 0000001A D134            BNE              error
   30 0000001C         
   31 0000001C         
   32 0000001C         ;CASE 3a: r0+, r1- (|ro|>|r1|)
   33 0000001C 4859            LDR              r0, =0x09656000
   34 0000001E 495A            LDR              r1, =0x87847000
   35 00000020         
   36 00000020 F7FF FFFE       BL               bcdadd
   37 00000024         
   38 00000024 4A59            LDR              r2, =0x01809000
   39 00000026 4290            CMP              r0, r2
   40 00000028 D12D            BNE              error
   41 0000002A         
   42 0000002A         ;CASE 3b: r0+, r1- (|ro|<|r1|)
   43 0000002A 4859            LDR              r0, =0x07847000
   44 0000002C 4959            LDR              r1, =0x89656000
   45 0000002E         
   46 0000002E F7FF FFFE       BL               bcdadd
   47 00000032         
   48 00000032 4A59            LDR              r2, =0x81809000
   49 00000034 4290            CMP              r0, r2
   50 00000036 D126            BNE              error
   51 00000038         
   52 00000038         ;CASE 3c: r0+, r1- (|ro|=|r1|)
   53 00000038 4852            LDR              r0, =0x09656000
   54 0000003A 4956            LDR              r1, =0x89656000
   55 0000003C         
   56 0000003C F7FF FFFE       BL               bcdadd
   57 00000040         
   58 00000040 F04F 0200       LDR              r2, =0x00000000



ARM Macro Assembler    Page 2 


   59 00000044 4290            CMP              r0, r2
   60 00000046 D11E            BNE              error
   61 00000048         
   62 00000048         
   63 00000048         ;CASE 4a: r0-, r1+ (|ro|>|r1|)
   64 00000048 4852            LDR              r0, =0x89656000
   65 0000004A 4951            LDR              r1, =0x07847000
   66 0000004C         
   67 0000004C F7FF FFFE       BL               bcdadd
   68 00000050         
   69 00000050 4A51            LDR              r2, =0x81809000
   70 00000052 4290            CMP              r0, r2
   71 00000054 D117            BNE              error
   72 00000056         
   73 00000056         ;CASE 4b: r0-, r1+ (|ro|<|r1|)
   74 00000056 484C            LDR              r0, =0x87847000
   75 00000058 494A            LDR              r1, =0x09656000
   76 0000005A         
   77 0000005A F7FF FFFE       BL               bcdadd
   78 0000005E         
   79 0000005E 4A4B            LDR              r2, =0x01809000
   80 00000060 4290            CMP              r0, r2
   81 00000062 D110            BNE              error
   82 00000064         
   83 00000064         ;CASE 4c: r0-, r1+ (|ro|=|r1|)
   84 00000064 484B            LDR              r0, =0x89656000
   85 00000066 4947            LDR              r1, =0x09656000
   86 00000068         
   87 00000068 F7FF FFFE       BL               bcdadd
   88 0000006C         
   89 0000006C F04F 0200       LDR              r2, =0x00000000
   90 00000070 4290            CMP              r0, r2
   91 00000072 D108            BNE              error
   92 00000074         
   93 00000074         ;CASE 5: r0 , r1 have an overflow to start with
   94 00000074 4849            LDR              r0, =0xF9656000
   95 00000076 4943            LDR              r1, =0x09656000
   96 00000078         
   97 00000078 F7FF FFFE       BL               bcdadd
   98 0000007C         
   99 0000007C F04F 5240       LDR              r2, =0x30000000
  100 00000080 4290            CMP              r0, r2
  101 00000082 D100            BNE              error
  102 00000084         
  103 00000084 E000            B                success
  104 00000086         
  105 00000086 E7FE    error   B                error
  106 00000088         
  107 00000088 E7FE    success B                success
  108 0000008A         
  109 0000008A         
  110 0000008A         
  111 0000008A         
  112 0000008A         
  113 0000008A         
  114 0000008A         ;bcdadd routine, takes two well formatted BCDs in r0 and
                        r1, and places their BCD sum in r0
  115 0000008A         bcdadd
  116 0000008A B500            push             {LR}



ARM Macro Assembler    Page 3 


  117 0000008C         
  118 0000008C         ;determine if any of r0 and r1 have an overflow
  119 0000008C F010 4F80       TST              r0, #0x40000000
  120 00000090 D138            BNE              overflow
  121 00000092 F011 4F80       TST              r1, #0x40000000
  122 00000096 D135            BNE              overflow
  123 00000098         
  124 00000098         ;determine sign of r0
  125 00000098 F010 4F00       TST              r0, #0x80000000
  126 0000009C D100            BNE              r0Negative
  127 0000009E E003            B                r0Positive
  128 000000A0         
  129 000000A0         r0Negative
  130 000000A0         ;determine sign of r1
  131 000000A0 F011 4F00       TST              r1, #0x80000000
  132 000000A4 D107            BNE              r0N_r1N
  133 000000A6 E00B            B                r0N_r1P
  134 000000A8         
  135 000000A8         r0Positive
  136 000000A8         ;determine sign of r1
  137 000000A8 F011 4F00       TST              r1, #0x80000000
  138 000000AC D11C            BNE              r0P_r1N
  139 000000AE E7FF            B                r0P_r1P
  140 000000B0         
  141 000000B0         ;CASE 1: r0 Positive, r1 Positive 
  142 000000B0         r0P_r1P
  143 000000B0 F000 F838       BL               add
  144 000000B4 E01C            B                checkOverflow ;check overflow o
                                                            nly if r0 and r1 ar
                                                            e both same sign
  145 000000B6         
  146 000000B6         ;CASE 2: r0 Negative, r1 Negative
  147 000000B6         r0N_r1N
  148 000000B6 F000 F835       BL               add
  149 000000BA F040 4000       ORR              r0, #0x80000000 ;set the negati
                                                            ve bit
  150 000000BE E017            B                checkOverflow ;check overflow o
                                                            nly if r0 and r1 ar
                                                            e both same sign
  151 000000C0         
  152 000000C0         ;CASE 3a: r0 Negative, r1 Positive (r1>=|r0|)
  153 000000C0         r0N_r1P
  154 000000C0 F020 4070       AND              r0, #0x0fffffff ;clear last nib
                                                            ble since now we've
                                                             already processed 
                                                            overflow and sign f
                                                            lags
  155 000000C4 F021 4170       AND              r1, #0x0fffffff
  156 000000C8         
  157 000000C8 4288            CMP              r0, r1      ;moved comparison b
                                                            efore the first ten
                                                            sComplement (didn't
                                                             work after)
  158 000000CA DC04            BGT              r0N_r1P_GT
  159 000000CC         
  160 000000CC F000 F81F       BL               tensComplement
  161 000000D0 F000 F828       BL               add         ;r1 needs to be lar
                                                            ger than or equal t
                                                            o r0 (before comple



ARM Macro Assembler    Page 4 


                                                            ment operation) for
                                                             the result to be p
                                                            ositive
  162 000000D4 E011            B                stop
  163 000000D6         
  164 000000D6         ;CASE 3b: r0 Negative, r1 Positive (r1<|r0|)
  165 000000D6         r0N_r1P_GT
  166 000000D6 F000 F81A       BL               tensComplement
  167 000000DA F000 F823       BL               add
  168 000000DE F000 F816       BL               tensComplement
  169 000000E2         ;add negative sign to result
  170 000000E2 F040 4000       ORR              r0, #0x80000000 ;set the negati
                                                            ve bit 
  171 000000E6 E008            B                stop
  172 000000E8         
  173 000000E8         ;CASE 4: r0 Positive, r1 Negative
  174 000000E8         r0P_r1N
  175 000000E8         ;swap and call case 3
  176 000000E8 460A            MOV              r2, r1
  177 000000EA 4601            MOV              r1, r0
  178 000000EC 4610            MOV              r0, r2
  179 000000EE E7E7            B                r0N_r1P
  180 000000F0         
  181 000000F0         
  182 000000F0         ;normal exits
  183 000000F0         checkOverflow
  184 000000F0         ;determine if overflow, and set overflow bit if the case
                       
  185 000000F0 F010 5F80       TST              r0,#0x10000000
  186 000000F4 BF18 F040 
              4080             ORRNE            r0,#0x40000000 ;set the overflo
                                                            w bit if there was 
                                                            an overflow
  187 000000FA         
  188 000000FA         stop
  189 000000FA         ;clear don't care bits for uniformity
  190 000000FA F020 5040       AND              r0, #0xCFFFFFFF
  191 000000FE         
  192 000000FE F85D EB04       pop              {LR}
  193 00000102 4770            BX               LR
  194 00000104         
  195 00000104         ;abnormal exits
  196 00000104         overflow
  197 00000104 F04F 5040       LDR              r0, =0x30000000 ;return special
                                                             value if passed va
                                                            lues have overflow 
                                                            to begin with
  198 00000108         
  199 00000108 F85D EB04       pop              {LR}
  200 0000010C 4770            BX               LR
  201 0000010E         
  202 0000010E         
  203 0000010E         
  204 0000010E         
  205 0000010E         
  206 0000010E         
  207 0000010E         
  208 0000010E         
  209 0000010E         ;computes tensComplement of r0 and stores it in r0



ARM Macro Assembler    Page 5 


  210 0000010E         ;assumes properly formatted BCD in r0
  211 0000010E         tensComplement
  212 0000010E B502            push             {r1,LR}
  213 00000110         
  214 00000110         ;constructing the number #0x09999999
  215 00000110 4A23            LDR              r2, =0x09999999
  216 00000112         
  217 00000112         ;9's complement
  218 00000112 EBC0 0002       RSB              r0, r0, r2
  219 00000116         
  220 00000116         ;add one using our adder routine
  221 00000116 F04F 0101       MOV              r1, #1
  222 0000011A F000 F803       BL               add
  223 0000011E         
  224 0000011E E8BD 4002       pop              {r1,LR}
  225 00000122 4770            BX               LR
  226 00000124         
  227 00000124         
  228 00000124         
  229 00000124         
  230 00000124         
  231 00000124         
  232 00000124         
  233 00000124         
  234 00000124         ;assumes well formatted BCDs (i.e. no nibble over 9)
  235 00000124         ;adds +ve BCDs of 7 nibbles stored in r0 and r1 and retu
                       rns result in r0
  236 00000124         add
  237 00000124 B4FC            push             {r2-r7}     ;save context of us
                                                            ed scratch register
                                                            s
  238 00000126         
  239 00000126 F04F 0400       MOV              r4, #0      ;r4 will contain th
                                                            e result
  240 0000012A F04F 0300       MOV              r3, #0      ;r2 and r3 are for 
                                                            additions (r3 conta
                                                            ins result)
  241 0000012E F04F 0200       MOV              r2, #0
  242 00000132         
  243 00000132         ;values used for special purposes (shifted left after ev
                       ery nibble addition)
  244 00000132 F04F 050F       MOV              r5, #0x0000000f ;used as mask t
                                                            o extract nibble
  245 00000136 F04F 0609       MOV              r6, #0x00000009 ;used to determ
                                                            ine if sum greater 
                                                            than 9
  246 0000013A F04F 0706       MOV              r7, #0x00000006 ;used to add 6 
                                                            to a sum if greater
                                                             than 9
  247 0000013E         
  248 0000013E         nibble_add_loop
  249 0000013E         ;isolate the nimbles to be added
  250 0000013E EA00 0205       AND              r2, r0, r5
  251 00000142 EA01 0305       AND              r3, r1, r5
  252 00000146         
  253 00000146         ;add the isolated nibbles
  254 00000146 4413            ADD              r3, r2, r3
  255 00000148         
  256 00000148         ;add the new nibble sum to the overall sum



ARM Macro Assembler    Page 6 


  257 00000148 441C            ADD              r4, r4, r3
  258 0000014A         
  259 0000014A 42B4            CMP              r4, r6      ;perform comparison
                                                             here in order to i
                                                            nclude carry from p
                                                            revious nibble add 
                                                            
  260 0000014C BFC8 443C       ADDGT            r4, r7
  261 00000150         
  262 00000150         ;shifting of special values
  263 00000150         ;note that shifting is not done during operation (using 
                       barrel shifter) because the shifted value is not persist
                       ed
  264 00000150 EA4F 1505       LSL              r5, #4
  265 00000154 EA4F 1606       LSL              r6, #4      ;shift of r6 replic
                                                            ates the 9's for co
                                                            mparison purposes w
                                                            ith r4
  266 00000158 F106 0609       ADD              r6, #9
  267 0000015C EA4F 1707       LSL              r7, #4
  268 00000160         
  269 00000160         ;determine if we need to pursue adding nibbles
  270 00000160 F1B5 4F70       CMP              r5, #0xf0000000
  271 00000164 D1EB            BNE              nibble_add_loop ;when the compa
                                                            rison produces a re
                                                            sult of 0, don't br
                                                            anch again
  272 00000166         
  273 00000166 4620            MOV              r0, r4      ;store result in r0
                                                            
  274 00000168 BCFC            pop              {r2-r7}     ;restore context
  275 0000016A         
  276 0000016A 4770            BX               LR
  277 0000016C         
  278 0000016C                 END
              00762500 
              00309380 
              01071880 
              80039785 
              80139962 
              80179747 
              09656000 
              87847000 
              01809000 
              07847000 
              89656000 
              81809000 
              F9656000 
              09999999 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=bcdadd.d
 -obcdadd.o -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\ST\STM32F10x --predef
ine="__EVAL SETA 1" --list=bcdadd.lst bcdadd.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

PROGRAM 00000000

Symbol: PROGRAM
   Definitions
      At line 2 in file bcdadd.s
   Uses
      None
Comment: PROGRAM unused
add 00000124

Symbol: add
   Definitions
      At line 236 in file bcdadd.s
   Uses
      At line 143 in file bcdadd.s
      At line 148 in file bcdadd.s
      At line 161 in file bcdadd.s
      At line 167 in file bcdadd.s
      At line 222 in file bcdadd.s

bcdadd 0000008A

Symbol: bcdadd
   Definitions
      At line 115 in file bcdadd.s
   Uses
      At line 5 in file bcdadd.s
      At line 15 in file bcdadd.s
      At line 25 in file bcdadd.s
      At line 36 in file bcdadd.s
      At line 46 in file bcdadd.s
      At line 56 in file bcdadd.s
      At line 67 in file bcdadd.s
      At line 77 in file bcdadd.s
      At line 87 in file bcdadd.s
      At line 97 in file bcdadd.s

checkOverflow 000000F0

Symbol: checkOverflow
   Definitions
      At line 183 in file bcdadd.s
   Uses
      At line 144 in file bcdadd.s
      At line 150 in file bcdadd.s

error 00000086

Symbol: error
   Definitions
      At line 105 in file bcdadd.s
   Uses
      At line 19 in file bcdadd.s
      At line 29 in file bcdadd.s
      At line 40 in file bcdadd.s
      At line 50 in file bcdadd.s
      At line 60 in file bcdadd.s
      At line 71 in file bcdadd.s
      At line 81 in file bcdadd.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 91 in file bcdadd.s
      At line 101 in file bcdadd.s
      At line 105 in file bcdadd.s

nibble_add_loop 0000013E

Symbol: nibble_add_loop
   Definitions
      At line 248 in file bcdadd.s
   Uses
      At line 271 in file bcdadd.s
Comment: nibble_add_loop used once
overflow 00000104

Symbol: overflow
   Definitions
      At line 196 in file bcdadd.s
   Uses
      At line 120 in file bcdadd.s
      At line 122 in file bcdadd.s

r0N_r1N 000000B6

Symbol: r0N_r1N
   Definitions
      At line 147 in file bcdadd.s
   Uses
      At line 132 in file bcdadd.s
Comment: r0N_r1N used once
r0N_r1P 000000C0

Symbol: r0N_r1P
   Definitions
      At line 153 in file bcdadd.s
   Uses
      At line 133 in file bcdadd.s
      At line 179 in file bcdadd.s

r0N_r1P_GT 000000D6

Symbol: r0N_r1P_GT
   Definitions
      At line 165 in file bcdadd.s
   Uses
      At line 158 in file bcdadd.s
Comment: r0N_r1P_GT used once
r0Negative 000000A0

Symbol: r0Negative
   Definitions
      At line 129 in file bcdadd.s
   Uses
      At line 126 in file bcdadd.s
Comment: r0Negative used once
r0P_r1N 000000E8

Symbol: r0P_r1N
   Definitions
      At line 174 in file bcdadd.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 138 in file bcdadd.s
Comment: r0P_r1N used once
r0P_r1P 000000B0

Symbol: r0P_r1P
   Definitions
      At line 142 in file bcdadd.s
   Uses
      At line 139 in file bcdadd.s
Comment: r0P_r1P used once
r0Positive 000000A8

Symbol: r0Positive
   Definitions
      At line 135 in file bcdadd.s
   Uses
      At line 127 in file bcdadd.s
Comment: r0Positive used once
stop 000000FA

Symbol: stop
   Definitions
      At line 188 in file bcdadd.s
   Uses
      At line 162 in file bcdadd.s
      At line 171 in file bcdadd.s

success 00000088

Symbol: success
   Definitions
      At line 107 in file bcdadd.s
   Uses
      At line 103 in file bcdadd.s
      At line 107 in file bcdadd.s

tensComplement 0000010E

Symbol: tensComplement
   Definitions
      At line 211 in file bcdadd.s
   Uses
      At line 160 in file bcdadd.s
      At line 166 in file bcdadd.s
      At line 168 in file bcdadd.s

wrapper 00000000

Symbol: wrapper
   Definitions
      At line 9 in file bcdadd.s
   Uses
      At line 4 in file bcdadd.s
Comment: wrapper used once
18 symbols
344 symbols in table
