


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 AREA             PROGRAM, CODE, READONLY
    3 00000000         
    4 00000000                 EXPORT           wrapper
    5 00000000                 ENTRY
    6 00000000         
    7 00000000         ;wrapper to the bcdadd routine that sends it operands an
                       d tests the returned sum
    8 00000000         wrapper
    9 00000000         ;constructing the numbers to be added
   10 00000000 F04F 6110       LDR              r1, =0x09000000
   11 00000004 4845            LDR              r0, =0x80200000
   12 00000006         
   13 00000006 F000 F818       BL               bcdadd
   14 0000000A         
   15 0000000A F1B0 6F08       CMP              r0, #0x08800000
   16 0000000E D112            BNE              error
   17 00000010         
   18 00000010         ;constructing the numbers to be added
   19 00000010 F04F 4109       LDR              r1, =0x89000000
   20 00000014 4841            LDR              r0, =0x80200000
   21 00000016         
   22 00000016 F000 F810       BL               bcdadd
   23 0000001A         
   24 0000001A 4A41            LDR              r2, =0x89200000
   25 0000001C 4290            CMP              r0, r2
   26 0000001E D10A            BNE              error
   27 00000020         
   28 00000020         
   29 00000020         ;constructing the numbers to be added
   30 00000020 F04F 6010       MOV              r0, #0x09000000
   31 00000024 F44F 1180       MOV              r1, #0x00100000
   32 00000028         
   33 00000028 F000 F807       BL               bcdadd
   34 0000002C         
   35 0000002C F04F 6211       LDR              r2, =0x09100000
   36 00000030 4290            CMP              r0, r2
   37 00000032 D100            BNE              error
   38 00000034         
   39 00000034         
   40 00000034 E000            B                success
   41 00000036         
   42 00000036 E7FE    error   B                error
   43 00000038         
   44 00000038 E7FE    success B                success
   45 0000003A         
   46 0000003A         
   47 0000003A         
   48 0000003A         
   49 0000003A         
   50 0000003A         
   51 0000003A         ;bcdadd routine, takes two well formatted BCDs in r0 and
                        r1, and places their BCD sum in r0
   52 0000003A         bcdadd
   53 0000003A B500            push             {LR}
   54 0000003C         
   55 0000003C         ;determine if any of r0 and r1 have an overflow
   56 0000003C F010 4F80       TST              r0, #0x40000000
   57 00000040 D12C            BNE              overflow



ARM Macro Assembler    Page 2 


   58 00000042 F011 4F80       TST              r1, #0x40000000
   59 00000046 D129            BNE              overflow
   60 00000048         
   61 00000048         ;determine sign of r0
   62 00000048 F010 4F00       TST              r0, #0x80000000
   63 0000004C D100            BNE              r0Negative
   64 0000004E E003            B                r0Positive
   65 00000050         
   66 00000050         r0Negative
   67 00000050         ;determine sign of r1
   68 00000050 F011 4F00       TST              r1, #0x80000000
   69 00000054 D107            BNE              r0N_r1N
   70 00000056 E00B            B                r0N_r1P
   71 00000058         
   72 00000058         r0Positive
   73 00000058         ;determine sign of r1
   74 00000058 F011 4F00       TST              r1, #0x80000000
   75 0000005C D11A            BNE              r0P_r1N
   76 0000005E E7FF            B                r0P_r1P
   77 00000060         
   78 00000060         ;CASE 1: r0 Positive, r1 Positive 
   79 00000060         r0P_r1P
   80 00000060 F000 F838       BL               add
   81 00000064 E01A            B                checkOverflow ;check overflow o
                                                            nly if r0 and r1 ar
                                                            e both same sign
   82 00000066         
   83 00000066         ;CASE 2: r0 Negative, r1 Negative
   84 00000066         r0N_r1N
   85 00000066 F000 F835       BL               add
   86 0000006A F040 4000       ORR              r0, #0x80000000 ;set the negati
                                                            ve bit
   87 0000006E E015            B                checkOverflow ;check overflow o
                                                            nly if r0 and r1 ar
                                                            e both same sign
   88 00000070         
   89 00000070         ;CASE 3a: r0 Negative, r1 Positive (r1>=|r0|)
   90 00000070         r0N_r1P
   91 00000070 F020 4070       AND              r0, #0x0fffffff ;clear last nib
                                                            ble since now we've
                                                             already processed 
                                                            overflow and sign f
                                                            lags
   92 00000074 F021 4170       AND              r1, #0x0fffffff
   93 00000078         
   94 00000078 F000 F81A       BL               tensComplement
   95 0000007C         
   96 0000007C 4288            CMP              r0, r1
   97 0000007E DB02            BLT              r0N_r1P_GT
   98 00000080         
   99 00000080 F000 F828       BL               add         ;r1 needs to be lar
                                                            ger than or equal t
                                                            o r0 (before comple
                                                            ment operation) for
                                                             the result to be p
                                                            ositive
  100 00000084 E00F            B                stop
  101 00000086         
  102 00000086         ;CASE 3b: r0 Negative, r1 Positive (r1<|r0|)



ARM Macro Assembler    Page 3 


  103 00000086         r0N_r1P_GT
  104 00000086 F000 F825       BL               add
  105 0000008A F000 F811       BL               tensComplement
  106 0000008E         ;add negative sign to result
  107 0000008E F040 4000       ORR              r0, #0x80000000 ;set the negati
                                                            ve bit 
  108 00000092 E008            B                stop
  109 00000094         
  110 00000094         ;CASE 2: r0 Positive, r1 Negative
  111 00000094         r0P_r1N
  112 00000094         ;swap and call case 3
  113 00000094 460A            MOV              r2, r1
  114 00000096 4601            MOV              r1, r0
  115 00000098 4610            MOV              r0, r2
  116 0000009A E7E9            B                r0N_r1P
  117 0000009C         
  118 0000009C         overflow
  119 0000009C         
  120 0000009C         checkOverflow
  121 0000009C         ;determine if overflow, and set overflow bit if the case
                       
  122 0000009C F010 5F80       TST              r0,#0x10000000
  123 000000A0 BF18 F040 
              4080             ORRNE            r0,#0x40000000 ;set the overflo
                                                            w bit if there was 
                                                            an overflow
  124 000000A6         
  125 000000A6         stop
  126 000000A6         ;clear don't care bits for uniformity
  127 000000A6 F020 5040       AND              r0, #0xCFFFFFFF
  128 000000AA         
  129 000000AA F85D EB04       pop              {LR}
  130 000000AE 4770            BX               LR
  131 000000B0         
  132 000000B0         
  133 000000B0         
  134 000000B0         
  135 000000B0         
  136 000000B0         
  137 000000B0         
  138 000000B0         
  139 000000B0         
  140 000000B0         ;computes tensComplement of r0 and stores it in r0
  141 000000B0         ;assumes properly formatted BCD in r0
  142 000000B0         tensComplement
  143 000000B0 B502            push             {r1,LR}
  144 000000B2         
  145 000000B2         ;constructing the number #0x09999999
  146 000000B2 F04F 6219       MOV              r2, #0x09900000
  147 000000B6 F502 2219       ADD              r2, #0x00099000
  148 000000BA F502 6219       ADD              r2, #0x00000990
  149 000000BE F102 0209       ADD              r2, #0x00000009
  150 000000C2         
  151 000000C2         ;9's complement
  152 000000C2 EBC0 0002       RSB              r0, r0, r2
  153 000000C6         
  154 000000C6         ;add one using our adder routine
  155 000000C6 F04F 0101       MOV              r1, #1
  156 000000CA F000 F803       BL               add



ARM Macro Assembler    Page 4 


  157 000000CE         
  158 000000CE E8BD 4002       pop              {r1,LR}
  159 000000D2 4770            BX               LR
  160 000000D4         
  161 000000D4         
  162 000000D4         
  163 000000D4         
  164 000000D4         
  165 000000D4         
  166 000000D4         
  167 000000D4         
  168 000000D4         ;assumes well formatted BCDs (i.e. no nibble over 9)
  169 000000D4         ;adds +ve BCDs of 7 nibbles stored in r0 and r1 and retu
                       rns result in r0
  170 000000D4         add
  171 000000D4 B4FC            push             {r2-r7}     ;save context of us
                                                            ed scratch register
                                                            s
  172 000000D6         
  173 000000D6 F04F 0400       MOV              r4, #0      ;r4 will contain th
                                                            e result
  174 000000DA F04F 0300       MOV              r3, #0      ;r2 and r3 are for 
                                                            additions (r3 conta
                                                            ins result)
  175 000000DE F04F 0200       MOV              r2, #0
  176 000000E2         
  177 000000E2         ;values used for special purposes (shifted left after ev
                       ery nibble addition)
  178 000000E2 F04F 050F       MOV              r5, #0x0000000f ;used as mask t
                                                            o extract nibble
  179 000000E6 F04F 0609       MOV              r6, #0x00000009 ;used to determ
                                                            ine if sum greater 
                                                            than 9
  180 000000EA F04F 0706       MOV              r7, #0x00000006 ;used to add 6 
                                                            to a sum if greater
                                                             than 9
  181 000000EE         
  182 000000EE         next
  183 000000EE         ;isolate the nimbles to be added
  184 000000EE EA00 0205       AND              r2, r0, r5
  185 000000F2 EA01 0305       AND              r3, r1, r5
  186 000000F6         
  187 000000F6         ;add the isolated nibbles
  188 000000F6 4413            ADD              r3, r2, r3
  189 000000F8         
  190 000000F8         ;add the new nibble sum to the overall sum
  191 000000F8 441C            ADD              r4, r4, r3
  192 000000FA         
  193 000000FA 42B4            CMP              r4, r6      ;perform comparison
                                                             here in order to i
                                                            nclude carry from p
                                                            revious nibble add 
                                                            
  194 000000FC BFC8 443C       ADDGT            r4, r7
  195 00000100         
  196 00000100         ;shifting of special values
  197 00000100         ;note that shifting is not done during operation (using 
                       barrel shifter) because the shifted value is not persist
                       ed



ARM Macro Assembler    Page 5 


  198 00000100 EA4F 1505       LSL              r5, #4
  199 00000104 EA4F 1606       LSL              r6, #4      ;shift of r6 replic
                                                            ates the 9's for co
                                                            mparison purposes w
                                                            ith r4
  200 00000108 F106 0609       ADD              r6, #9
  201 0000010C EA4F 1707       LSL              r7, #4
  202 00000110         
  203 00000110         ;determine if we need to pursue adding nibbles
  204 00000110 F1B5 4F70       CMP              r5, #0xf0000000
  205 00000114 D1EB            BNE              next        ;when the compariso
                                                            n produces a result
                                                             of 0, don't branch
                                                             again
  206 00000116         
  207 00000116 4620            MOV              r0, r4      ;store result in r0
                                                            
  208 00000118 BCFC            pop              {r2-r7}     ;restore context
  209 0000011A         
  210 0000011A 4770            BX               LR
  211 0000011C         
  212 0000011C                 END
              80200000 
              89200000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=bcdadd.d
 -obcdadd.o -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\ST\STM32F10x --predef
ine="__EVAL SETA 1" --list=bcdadd.lst bcdadd.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

PROGRAM 00000000

Symbol: PROGRAM
   Definitions
      At line 2 in file bcdadd.s
   Uses
      None
Comment: PROGRAM unused
add 000000D4

Symbol: add
   Definitions
      At line 170 in file bcdadd.s
   Uses
      At line 80 in file bcdadd.s
      At line 85 in file bcdadd.s
      At line 99 in file bcdadd.s
      At line 104 in file bcdadd.s
      At line 156 in file bcdadd.s

bcdadd 0000003A

Symbol: bcdadd
   Definitions
      At line 52 in file bcdadd.s
   Uses
      At line 13 in file bcdadd.s
      At line 22 in file bcdadd.s
      At line 33 in file bcdadd.s

checkOverflow 0000009C

Symbol: checkOverflow
   Definitions
      At line 120 in file bcdadd.s
   Uses
      At line 81 in file bcdadd.s
      At line 87 in file bcdadd.s

error 00000036

Symbol: error
   Definitions
      At line 42 in file bcdadd.s
   Uses
      At line 16 in file bcdadd.s
      At line 26 in file bcdadd.s
      At line 37 in file bcdadd.s
      At line 42 in file bcdadd.s

next 000000EE

Symbol: next
   Definitions
      At line 182 in file bcdadd.s
   Uses
      At line 205 in file bcdadd.s
Comment: next used once
overflow 0000009C



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: overflow
   Definitions
      At line 118 in file bcdadd.s
   Uses
      At line 57 in file bcdadd.s
      At line 59 in file bcdadd.s

r0N_r1N 00000066

Symbol: r0N_r1N
   Definitions
      At line 84 in file bcdadd.s
   Uses
      At line 69 in file bcdadd.s
Comment: r0N_r1N used once
r0N_r1P 00000070

Symbol: r0N_r1P
   Definitions
      At line 90 in file bcdadd.s
   Uses
      At line 70 in file bcdadd.s
      At line 116 in file bcdadd.s

r0N_r1P_GT 00000086

Symbol: r0N_r1P_GT
   Definitions
      At line 103 in file bcdadd.s
   Uses
      At line 97 in file bcdadd.s
Comment: r0N_r1P_GT used once
r0Negative 00000050

Symbol: r0Negative
   Definitions
      At line 66 in file bcdadd.s
   Uses
      At line 63 in file bcdadd.s
Comment: r0Negative used once
r0P_r1N 00000094

Symbol: r0P_r1N
   Definitions
      At line 111 in file bcdadd.s
   Uses
      At line 75 in file bcdadd.s
Comment: r0P_r1N used once
r0P_r1P 00000060

Symbol: r0P_r1P
   Definitions
      At line 79 in file bcdadd.s
   Uses
      At line 76 in file bcdadd.s
Comment: r0P_r1P used once
r0Positive 00000058




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: r0Positive
   Definitions
      At line 72 in file bcdadd.s
   Uses
      At line 64 in file bcdadd.s
Comment: r0Positive used once
stop 000000A6

Symbol: stop
   Definitions
      At line 125 in file bcdadd.s
   Uses
      At line 100 in file bcdadd.s
      At line 108 in file bcdadd.s

success 00000038

Symbol: success
   Definitions
      At line 44 in file bcdadd.s
   Uses
      At line 40 in file bcdadd.s
      At line 44 in file bcdadd.s

tensComplement 000000B0

Symbol: tensComplement
   Definitions
      At line 142 in file bcdadd.s
   Uses
      At line 94 in file bcdadd.s
      At line 105 in file bcdadd.s

wrapper 00000000

Symbol: wrapper
   Definitions
      At line 8 in file bcdadd.s
   Uses
      At line 4 in file bcdadd.s
Comment: wrapper used once
18 symbols
344 symbols in table
